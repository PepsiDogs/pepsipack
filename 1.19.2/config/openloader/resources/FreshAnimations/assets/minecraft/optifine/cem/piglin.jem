{
	"credit": "Made with Blockbench",
	"textureSize": [64, 64],
	"models": [
		{
			"part": "head",
			"id": "head",
			"invertAxis": "xy",
			"translate": [0, 0, 0],
			"submodels": [
				{
					"id": "Created_by_FreshLX_for_Fresh_Animations",
					"invertAxis": "xy",
					"translate": [0, 0, 0]
				}
			],
			"animations": [
				{
					"crossbow.rx": "     if(equals(left_sleeve.ry -torad(40), right_sleeve.ry +torad(40), torad(30)), 1, 0 )",
					"melee_right.rx": "  0",
					"melee_left.rx": "   0",
					"inspect_right.rx": "0",
					"inspect_left.rx": " 0",
					"dance.rx": "        0"
				},
				{
					"head.rx": "if(inspect_right.rx==1||inspect_left.rx==1, torad(25), torad(head_pitch) +clamp(torad(head_yaw)/4, 0, torad(20)) +clamp(-torad(head_yaw)/4, 0, torad(20)) ) -sin(pi*2*swing_progress)/5*if(melee_right.rx==1||melee_left.rx==1, 1, 0.5) +cos(time/7*pi*2)/4*dance.rx",
					"head.ry": "if( inspect_left.rx==1, torad(-20), 0)         +if(melee_left.rx==1,      -sin(pi*swing_progress)/6, sin(pi*swing_progress)/6) +if(inspect_right.rx==1||inspect_left.rx==1, sin((age+limb_swing)/10 +sin(torad(45)+(age+limb_swing)/5)/2)/8*if(inspect_right.rx==1, -1, 1), clamp(torad(head_yaw)/1.2, -pi/2     , pi/2     ) ) -sin(time/7*pi)/2*dance.rx",
					"head.rz": "                                                if(melee_left.rx==1,      -sin(pi*swing_progress)/6, sin(pi*swing_progress)/6) +if(inspect_right.rx==1||inspect_left.rx==1, sin((age+limb_swing)/10 +sin(torad(45)+(age+limb_swing)/5)/2)/8*if(inspect_right.rx==1, -1, 1), clamp(torad(head_yaw)/4  , -torad(20), torad(20)) ) +sin(time/7*pi)/3*dance.rx",
					"head.tx": "if(melee_right.rx==1, 0.5 +sin(pi*swing_progress), melee_left.rx==1, -0.5 -sin(pi*swing_progress)  , sin(pi*swing_progress)  ) +sin(limb_swing/if(is_child, 2.4, 1.6)) *limb_speed/1.2 -cos(time/7*pi)*2*dance.rx",
					"head.ty": " 0.5 +sin(age/if(is_child, 6, 10)+limb_swing/3)/3 +sin(pi*swing_progress)*2*if(melee_right.rx==1||melee_left.rx==1, 1, 0.5) +(-sin(torad(90)+limb_swing/if(is_child, 2.4, 1.6)*2)/1.5*clamp(limb_speed*2, 0, 1))*clamp(sin(limb_speed*pi*1.5), 0, if(is_child, 0, 1)) +(sin(torad(135)+limb_swing/if(is_child, 2.4, 1.6)*2 -cos(torad(135)+limb_swing/if(is_child, 2.4, 1.6)*2)/3))*1.3*clamp(if(is_child, limb_speed*1.5, -cos(limb_speed*pi)), 0, 1) +(0.3 +cos(time/7*pi*2) )*dance.rx",
					"head.tz": "-0.5 +clamp(-0.5+limb_speed*3, -0.5, 0.3) -2.7*if(is_child, limb_speed, clamp(-1+limb_speed*2, 0, 1)) -torad(head_pitch) -sin(age/if(is_child, 6, 10)+limb_swing/3)/3 -sin(pi*swing_progress)*if(melee_right.rx==1||melee_left.rx==1, 4, 2) +if(melee_right.rx==1||melee_left.rx==1, 2, 0) +if(inspect_right.rx==1||inspect_left.rx==1, 2.5, 0) +if(is_child, 1, 1*dance.rx)",
					"headwear.rx": "head.rx",
					"headwear.ry": "head.ry",
					"headwear.rz": "head.rz",
					"headwear.tx": "head.tx *if(is_child, 1.5, 1)",
					"headwear.ty": "head.ty *if(is_child, 1.5, 1)",
					"headwear.tz": "head.tz *if(is_child, 1.5, 1)",
					"headwear.sx": "if(is_child, 1.5, 1)",
					"headwear.sy": "headwear.sx",
					"headwear.sz": "headwear.sx",
					"body.rx": "torad(5) +sin(age/if(is_child, 6, 10)+limb_swing/3)/30 +torad(15)*if(is_child, limb_speed, clamp(-1+limb_speed*2, 0, 1)) +torad(head_pitch)/10                                                             +if(melee_right.rx==1||melee_left.rx==1, torad(-10)                            +sin(pi*swing_progress)/2,  sin(pi*swing_progress)/3*if(melee_right.rx==1||melee_left.rx==1, 1, 0.5)) +if(inspect_right.rx==1||inspect_left.rx==1, torad(-13), 0) -torad(10)*if(is_child, 1, dance.rx)",
					"body.ry": "         if(melee_right.rx==1||melee_left.rx==1||is_riding, 0, clamp(torad(-15 )+limb_speed, torad(-15 ), 0)*if(is_child, 0, 1-dance.rx)) +if(melee_right.rx==1, torad(30)                             -sin(pi*swing_progress)  , melee_left.rx==1, torad(-20)                            +sin(pi*swing_progress)  , -sin(pi*swing_progress)/3*if(melee_right.rx==1||melee_left.rx==1, 1, 0.5)) -sin(limb_swing/if(is_child, 2.4, 1.6))/2 *limb_speed/1.2 +clamp(torad(head_yaw)/6, -torad(15), torad(15)) +sin(time/7*pi)/4*dance.rx",
					"body.rz": "head.rz +if(melee_right.rx==1||melee_left.rx==1||is_riding, 0, clamp(torad(-1.5)+limb_speed, torad(-1.5), 0)*if(is_child, 0, 1-dance.rx)) +if(melee_right.rx==1, torad( 5)*limb_speed -sin(pi*swing_progress)/9, melee_left.rx==1, torad(-5)*limb_speed +sin(pi*swing_progress)/9, -sin(pi*swing_progress)/6*if(melee_right.rx==1||melee_left.rx==1, 1, 0.5)) +sin(limb_swing/if(is_child, 2.4, 1.6))/10*limb_speed/1.2*if(melee_right.rx==1||melee_left.rx==1, 0, inspect_right.rx==1||inspect_left.rx==1||dance.rx==1, 1, clamp(2-limb_speed*2, -1, 1)) +if(inspect_right.rx==1||inspect_left.rx==1, -sin((age+limb_swing)/10 +sin(torad(45)+(age+limb_swing)/5)/2)/8*if(inspect_right.rx==1, -1, 1), clamp(-torad(head_yaw)/4, -torad(20), torad(20))) +( -sin(time/7*pi)/3 -cos(time/7*pi)/6 )*dance.rx",
					"body.tx": "head.tx +cos(time/7*pi)*dance.rx",
					"body.ty": "head.ty -0.1 +(-(sin(torad(135)+limb_swing/if(is_child, 2.4, 1.6)*2 -cos(torad(135)+limb_swing/if(is_child, 2.4, 1.6)*2)/3)) +sin(torad(160)+limb_swing/if(is_child, 2.4, 1.6)*2 -cos(torad(160)+limb_swing/if(is_child, 2.4, 1.6)*2)/3) )*clamp(if(is_child, limb_speed*1.5, -cos(limb_speed*pi)), 0, 1)",
					"body.tz": "head.tz +0.5"
				},
				{
					"right_arm.rx": "if(crossbow.rx==1, right_arm.rx +cos(torad(-45)+limb_swing/if(is_child, 2.4, 1.6)*2)/10 *limb_speed +torad(-8), torad(15)*limb_speed    ))",
					"left_arm.rx": " if(crossbow.rx==1,  left_arm.rx +cos(torad(-45)+limb_swing/if(is_child, 2.4, 1.6)*2)/10 *limb_speed           , torad(15)*limb_speed   ))",
					"right_arm.ry": "if(crossbow.rx==1, right_arm.ry +torad(-3), sin(age/if(is_child, 6, 10)+limb_swing/3+torad(90))/16 -sin(pi/2*swing_progress*2)/2 )) +clamp(torad( 20)-limb_speed, 0, torad( 20))*if(is_child, 1, dance.rx)",
					"left_arm.ry": " if(crossbow.rx==1,  left_arm.ry +torad( 3), sin(age/if(is_child, 6, 10)+limb_swing/3-torad(90))/16 +sin(pi/2*swing_progress*2)/2*if(melee_right.rx==1, -1, clamp(limb_speed*2, 1, 2)) )) +clamp(torad(-20)+limb_speed, torad(-20), 0)*if(is_child, 1, dance.rx)",
					"left_arm.rz": " if(crossbow.rx==1,  left_arm.rz, torad(-10) +torad(head_pitch)/14  )) +if( inspect_left.rx==1,  sin((age+limb_swing)/10 -cos((age/1.5+limb_swing)/5)/2)/3, 0 ) +if(dance.rx==1, torad(-80) +0.8*limb_speed, 0) +sin(time/7*pi -cos(time/7*pi)/2)/2*dance.rx",
					"right_arm.rz": "if(crossbow.rx==1, right_arm.rz, torad( 10) -torad(head_pitch)/14   ))  +sin(time/7*pi +cos(time/7*pi)/2)/2*dance.rx",
					"right_arm.tx": "-5 +body.tx +if(crossbow.rx==1, 0.3 +clamp(-head_yaw/10,  0, 2), if(melee_right.rx==1, -1,  melee_left.rx==1, sin(limb_swing/if(is_child, 2.4, 1.6))*limb_speed*1.2 +limb_speed  , 0) +sin(pi*swing_progress)*if(melee_right.rx==1, 2, 0) ) +if(inspect_right.rx==1, clamp(0.8-limb_speed*2, 0, 0.8), inspect_left.rx==1,                               0, 0) -1*dance.rx",
					"left_arm.tx": "  5 +body.tx +if(crossbow.rx==1, 0.3 +clamp(-head_yaw/10, -2, 0), if( melee_left.rx==1,  1, melee_right.rx==1, sin(limb_swing/if(is_child, 2.4, 1.6))*limb_speed*2 -limb_speed*1.5, 0) -sin(pi*swing_progress)*if( melee_left.rx==1, 2, 0) ) +if(inspect_right.rx==1, clamp(0.5-limb_speed*2, 0, 0.5), inspect_left.rx==1, clamp( 1 -limb_speed*4, 0,  1 ), 0) +1*dance.rx",
					"right_arm.ty": "2.2 +body.ty +sin(age/if(is_child, 6, 10)+limb_swing/3-torad(60))/4 +if(melee_right.rx==1, -1 -1*limb_speed, 0) +if(melee_right.rx==1||melee_left.rx==1, sin(pi*swing_progress), 0) +if(inspect_right.rx==1, 1, 0) -sin(time/7*pi)*2*dance.rx",
					"left_arm.ty": " 2.2 +body.ty +sin(age/if(is_child, 6, 10)+limb_swing/3-torad(60))/4 +if( melee_left.rx==1, -1 -1*limb_speed, 0) +if(melee_right.rx==1||melee_left.rx==1, sin(pi*swing_progress), 0) +if( inspect_left.rx==1, 1, 0) +sin(time/7*pi)*2*dance.rx",
					"right_arm.tz": "-2*if(is_child, limb_speed, clamp(-1+limb_speed*2, 0, 1)) -torad(head_pitch) -sin(limb_swing/if(is_child, 2.4, 1.6))*4*limb_speed/1.2 -sin(age/if(is_child, 6, 10)+limb_swing/3)/4 +clamp( torad(head_yaw), -3, 3) +if(crossbow.rx==1, -1 +clamp( head_yaw/15, -1, 0), if(melee_right.rx==1,  2 -sin(pi*swing_progress)*6, melee_left.rx==1, limb_speed*2 +sin(pi*swing_progress)*3, clamp(-2+limb_speed*8, -2, 0)*if(is_child, 0, 1-dance.rx) -sin(pi*swing_progress)*2)                                                               ) +if( inspect_left.rx==1, 3, 0) +( 0.5 +sin(time/7*pi) )*dance.rx",
					"left_arm.tz": " -2*if(is_child, limb_speed, clamp(-1+limb_speed*2, 0, 1)) -torad(head_pitch) +sin(limb_swing/if(is_child, 2.4, 1.6))*4*limb_speed/1.2 -sin(age/if(is_child, 6, 10)+limb_swing/3)/4 +clamp(-torad(head_yaw), -3, 3) +if(crossbow.rx==1, -1 +clamp(-head_yaw/15, -1, 0),+if(melee_right.rx==1, -1 +sin(pi*swing_progress)*3, melee_left.rx==1, 1.5          -sin(pi*swing_progress)*6, clamp( 1-limb_speed*2,  0, 1)*if(is_child, 0, 1-dance.rx) +sin(pi*swing_progress)*2) +if(!(melee_right.rx==1||melee_left.rx==1)&&is_riding, -3, 0) ) +if(inspect_right.rx==1, 2, 0) +( 0.5 -sin(time/7*pi) )*dance.rx"
				},
				{
					"right_leg.rx": "torad(10)*       limb_speed            +if(is_riding, torad(-80), clamp(torad(- 5)+limb_speed  , torad(- 5), 0)*(1-dance.rx) +(torad(2)+sin(torad( 20)+age/if(is_child, 6, 10)+limb_swing/3)/42) +( sin(limb_swing/if(is_child, 2.4, 1.6)) )/if(is_child, 1, if(limb_speed>=0.6, 1.5, 0.8))*limb_speed) +clamp(-torad(head_yaw)/30, -torad(5), torad(5)) +if(melee_left.rx==1, -sin(pi*swing_progress)/5, -sin(pi*swing_progress)/5*if(melee_right.rx==1||melee_left.rx==1, 1, 0)) +(-sin(time/7*pi)/15 +torad(8) )*dance.rx",
					"left_leg.rx": " torad(10)*       limb_speed            +if(is_riding, torad(-80), clamp(torad(  5)-limb_speed  , 0, torad(  5))*(1-dance.rx) +(torad(2)+sin(torad(-20)+age/if(is_child, 6, 10)+limb_swing/3)/35) +(-sin(limb_swing/if(is_child, 2.4, 1.6)) )/if(is_child, 1, if(limb_speed>=0.6, 1.5, 0.8))*limb_speed) +clamp( torad(head_yaw)/30, -torad(5), torad(5)) +if(melee_left.rx==1, -sin(pi*swing_progress)/5, -sin(pi*swing_progress)/5*if(melee_right.rx==1||melee_left.rx==1, 1, 0)) +( sin(time/7*pi)/15 +torad(8) )*dance.rx",
					"right_leg.ry": "torad( 5)*clamp( limb_speed*1.5, 0, 1) +if(is_riding, torad( 20), clamp(torad( 15)-limb_speed  , 0, torad( 15))*if(is_child, 1  , 0         )) +if(melee_right.rx==1, torad( 20)*limb_speed, 0) +clamp(-sin(limb_swing/if(is_child, 2.4, 1.6))/4*clamp(if(is_child, limb_speed*1.5, -cos(limb_speed*pi)), 0, 1), torad(-10), 0) +clamp(torad( 10)-limb_speed*2, 0, torad( 10))*dance.rx",
					"left_leg.ry": " torad(-5)*clamp( limb_speed*1.5, 0, 1) +if(is_riding, torad(-20), clamp(torad(-30)+limb_speed*2, torad(-30), 0)*if(is_child, 0.5, 1-dance.rx)) +if( melee_left.rx==1, torad(-20)*limb_speed, 0) +clamp(-sin(limb_swing/if(is_child, 2.4, 1.6))/4*clamp(if(is_child, limb_speed*1.5, -cos(limb_speed*pi)), 0, 1), 0, torad( 10)) +clamp(torad(-10)+limb_speed*2, torad(-10), 0)*dance.rx",
					"right_leg.rz": "                                        if(is_riding, 0         , clamp(torad(2.5)-limb_speed  , 0, torad(2.5))*(1-dance.rx) +torad( 3)) +sin(limb_swing/if(is_child, 2.4, 1.6))/8*limb_speed/1.2 +if(melee_right.rx==1, -sin(pi*swing_progress)/8  +sin(limb_swing/if(is_child, 2.4, 1.6))/3*limb_speed +torad(10)*limb_speed, melee_left.rx==1, sin(pi*swing_progress)/8                              +torad( 3)*limb_speed                       , 0) +if(melee_right.rx==1||melee_left.rx==1, -sin(limb_swing/if(is_child, 2.4, 1.6))/8*limb_speed, 0) +( cos(time/7*pi)/12 )*dance.rx",
					"left_leg.rz": "                                         if(is_riding, 0         , clamp(torad(- 5)+limb_speed  , torad(- 5), 0)*(1-dance.rx) +torad(-3)) +sin(limb_swing/if(is_child, 2.4, 1.6))/8*limb_speed/1.2 +if(melee_right.rx==1, torad(-3)*limb_speed                                                                                 , melee_left.rx==1, sin(pi*swing_progress)/8 +sin(limb_swing/if(is_child, 2.4, 1.6))/3*limb_speed +torad(-10)*limb_speed, 0) +if(melee_right.rx==1||melee_left.rx==1, -sin(limb_swing/if(is_child, 2.4, 1.6))/8*limb_speed, 0) +( cos(time/7*pi)/12 )*dance.rx",
					"right_leg.tx": "-2 +clamp(-0.25+limb_speed,-0.25, 0) +if(is_riding, 0, if(melee_left.rx==1, sin(pi*swing_progress), -sin(pi*swing_progress)*if(melee_right.rx==1||melee_left.rx==1, 1, 0))                                                                                    ) +cos(time/7*pi)*dance.rx",
					"left_leg.tx": "  2 +clamp( 0.25-limb_speed, 0, 0.25) +if(is_riding, 0, if(melee_left.rx==1, sin(pi*swing_progress), -sin(pi*swing_progress)*if(melee_right.rx==1||melee_left.rx==1, 1, 0)) +sin(torad(-20)+age/if(is_child, 6, 10)+limb_swing/3)/6*if(is_child, 0, 1-dance.rx)) +cos(time/7*pi)*dance.rx",
					"right_leg.ty": " 0.1 +clamp(12 +cos(if(limb_speed>=0.6, torad(-30), 0)+limb_swing/if(is_child, 2.4, 1.6))*2*clamp(limb_speed*2, 0, 2) +clamp(-1+limb_speed*1.5, 0, 1) , 0, 12.2) +if(is_riding, -1, 0) +clamp( (-sin(limb_swing/if(is_child, 2.4, 1.6)) +body.ty)*clamp(if(is_child, limb_speed*1.5, -cos(limb_speed*pi)), 0, 1), -4, 0)",
					"left_leg.ty": "  0.1 +clamp(12 -cos(if(limb_speed>=0.6, torad(-30), 0)+limb_swing/if(is_child, 2.4, 1.6))*2*clamp(limb_speed*2, 0, 2) +clamp(-1+limb_speed*1.5, 0, 1) , 0, 12.2) +if(is_riding, -1, 0) +clamp( ( sin(limb_swing/if(is_child, 2.4, 1.6)) +body.ty)*clamp(if(is_child, limb_speed*1.5, -cos(limb_speed*pi)), 0, 1), -4, 0)",
					"right_leg.tz": "-0.1 +clamp( 3 +cos(                                   limb_swing/if(is_child, 2.4, 1.6))*6*clamp(limb_speed*2, 0, 1), -6, 1)*1.2 +if(is_riding, -2, sin(pi*swing_progress)*if(melee_right.rx==1||melee_left.rx==1, 2, 0) +clamp( torad(head_yaw)/2, -pi/4, pi/4) -sin(torad( 20)+age/if(is_child, 6, 10)+limb_swing/3)/4) +if(is_riding, 0, melee_right.rx==1, clamp(-1+limb_speed*4, -1, 0), melee_left.rx==1, clamp(-2+limb_speed*4, -2, 0), clamp(-1.5+limb_speed*6, -1.5, 0)*if(is_child, 0, 1-dance.rx)) +clamp(-2+limb_speed*4, -2, 0)*if(is_child, 1, dance.rx) +sin(time/7*pi)*0.8*dance.rx",
					"left_leg.tz": " -0.1 +clamp( 3 -cos(                                   limb_swing/if(is_child, 2.4, 1.6))*6*clamp(limb_speed*2, 0, 1), -6, 1)*1.2 +if(is_riding, -2, sin(pi*swing_progress)*if(melee_right.rx==1||melee_left.rx==1, 2, 0) +clamp(-torad(head_yaw)/2, -pi/4, pi/4) -sin(torad(-20)+age/if(is_child, 6, 10)+limb_swing/3)/4) +if(is_riding, 0, melee_right.rx==1, clamp(-1+limb_speed*4, -1, 0), melee_left.rx==1,                            0 , clamp(-0.5+limb_speed*2, -0.5, 0)*if(is_child, 0, 1-dance.rx)) +clamp(-2+limb_speed*4, -2, 0)*if(is_child, 1, dance.rx) -sin(time/7*pi)*0.8*dance.rx"
				},
				{
					"eyes.tx": "clamp(-head_yaw/80 +if(inspect_right.rx==1||inspect_left.rx==1, sin((age+limb_swing)/10), 0), -0.25, 0.25)",
					"nose.ty": "-2 +cos(age+limb_swing)/10 *clamp(-1.5 +sin(age/10+limb_swing/2)*4 -cos(age/23+limb_swing/2)*4, 0, 1)",
					"nose.rx": "    sin(age+limb_swing)/12 *clamp(-1.5 +sin(age/10+limb_swing/2)*4 -cos(age/23+limb_swing/2)*4, 0, 1)",
					"right_ear2.rx": "-torad(5) +torad(20)*clamp(limb_speed*3, 0, 1) +if(inspect_right.rx==1||inspect_left.rx==1, torad(-10) +sin((age+limb_swing)/10 +sin((age+limb_swing)/5)/2)/5, -torad(head_pitch)/3) +sin(pi*swing_progress*2)/2*if(melee_right.rx==1||melee_left.rx==1, 1, 0.3) +cos(torad(45)+time/7*pi)/2*dance.rx",
					"left_ear2.rx": " -torad(5) +torad(20)*clamp(limb_speed*3, 0, 1) +if(inspect_right.rx==1||inspect_left.rx==1, torad(-10) -sin((age+limb_swing)/10 +sin((age+limb_swing)/5)/2)/5, -torad(head_pitch)/3) +sin(pi*swing_progress*2)/2*if(melee_right.rx==1||melee_left.rx==1, 1, 0.3) -cos(torad(45)+time/7*pi)/2*dance.rx",
					"right_ear2.ry": "torad(8)",
					"left_ear2.ry": "-torad(8)",
					"right_ear2.rz": "clamp(torad( 20) +cos(age/if(is_child, 6, 10)+limb_swing/3)/8 -sin(limb_swing/if(is_child, 2.4, 1.6)*2)/5*limb_speed +if(limb_speed>=0.6, -sin(limb_swing/if(is_child, 2.4, 1.6))/4*limb_speed, 0) +clamp(torad(head_yaw)/4, 0, torad( 30))*clamp(1-limb_speed*2, 0, 1) +sin(pi*swing_progress*2)*if(melee_right.rx==1||melee_left.rx==1, 1, 0.5) -cos(torad(45)+time/7*pi)/2*dance.rx, 0, torad( 180))",
					"left_ear2.rz": " clamp(torad(-20) -cos(age/if(is_child, 6, 10)+limb_swing/3)/8 +sin(limb_swing/if(is_child, 2.4, 1.6)*2)/5*limb_speed +if(limb_speed>=0.6, -sin(limb_swing/if(is_child, 2.4, 1.6))/4*limb_speed, 0) +clamp(torad(head_yaw)/4, torad(-30), 0)*clamp(1-limb_speed*2, 0, 1) -sin(pi*swing_progress*2)*if(melee_right.rx==1||melee_left.rx==1, 1, 0.5) -cos(torad(45)+time/7*pi)/2*dance.rx, torad(-180), 0)"
				}
			]
		},
		{
			"part": "headwear",
			"id": "headwear",
			"invertAxis": "xy",
			"translate": [0, -24, 0.25],
			"submodels": [
				{
					"id": "head2",
					"invertAxis": "xy",
					"translate": [0, 24, 0],
					"boxes": [
						{
							"coordinates": [-5, 0, -4, 10, 8, 8],
							"uvNorth": [8, 8, 18, 16],
							"uvEast": [0, 8, 8, 16],
							"uvSouth": [26, 8, 36, 16],
							"uvWest": [18, 8, 26, 16],
							"uvUp": [8, 0, 18, 8],
							"uvDown": [18, 8, 28, 0]
						}
					],
					"submodels": [
						{
							"id": "left_ear2",
							"invertAxis": "xy",
							"translate": [-5, 5.5, -0.5],
							"boxes": [
								{
									"coordinates": [-0.75, -4.5, -2, 1, 5, 4],
									"uvNorth": [55, 10, 56, 15],
									"uvEast": [51, 10, 55, 15],
									"uvSouth": [60, 10, 61, 15],
									"uvWest": [56, 10, 60, 15],
									"uvUp": [55, 6, 56, 10],
									"uvDown": [56, 10, 57, 6]
								}
							]
						},
						{
							"id": "right_ear2",
							"invertAxis": "xy",
							"translate": [5, 5.5, -0.5],
							"boxes": [
								{
									"coordinates": [-0.25, -4.5, -2, 1, 5, 4],
									"uvNorth": [43, 10, 44, 15],
									"uvEast": [39, 10, 43, 15],
									"uvSouth": [48, 10, 49, 15],
									"uvWest": [44, 10, 48, 15],
									"uvUp": [43, 6, 44, 10],
									"uvDown": [44, 10, 45, 6]
								}
							]
						},
						{
							"id": "nose",
							"invertAxis": "xy",
							"translate": [0, 2, -4],
							"boxes": [
								{
									"coordinates": [-2, -2, -1, 4, 4, 1],
									"uvNorth": [32, 2, 36, 6],
									"uvEast": [31, 2, 32, 6],
									"uvSouth": [37, 2, 41, 6],
									"uvWest": [36, 2, 37, 6],
									"uvUp": [32, 1, 36, 2],
									"uvDown": [36, 2, 40, 1]
								},
								{
									"coordinates": [2, -2, -1, 1, 2, 1],
									"uvNorth": [3, 1, 4, 3],
									"uvEast": [2, 1, 3, 3],
									"uvSouth": [5, 1, 6, 3],
									"uvWest": [4, 1, 5, 3],
									"uvUp": [3, 0, 4, 1],
									"uvDown": [4, 1, 5, 0]
								},
								{
									"coordinates": [-3, -2, -1, 1, 2, 1],
									"uvNorth": [3, 5, 4, 7],
									"uvEast": [2, 5, 3, 7],
									"uvSouth": [5, 5, 6, 7],
									"uvWest": [4, 5, 5, 7],
									"uvUp": [3, 4, 4, 5],
									"uvDown": [4, 5, 5, 4]
								}
							]
						},
						{
							"id": "eyes",
							"invertAxis": "xy",
							"translate": [0, 4.5, 0],
							"submodels": [
								{
									"id": "right_eye",
									"invertAxis": "xy",
									"translate": [2, 0, -4],
									"boxes": [
										{
											"coordinates": [0, -0.5, -0.03, 1, 1, 0.25],
											"uvNorth": [13, 17, 14, 18],
											"uvEast": [13, 17, 14, 18],
											"uvSouth": [13, 17, 14, 18],
											"uvWest": [13, 17, 14, 18],
											"uvUp": [14, 18, 13, 17],
											"uvDown": [14, 18, 13, 17]
										}
									]
								},
								{
									"id": "left_eye",
									"invertAxis": "xy",
									"translate": [-2, 0, -4],
									"boxes": [
										{
											"coordinates": [-1, -0.5, -0.03, 1, 1, 0.25],
											"uvNorth": [15, 17, 16, 18],
											"uvEast": [15, 17, 16, 18],
											"uvSouth": [15, 17, 16, 18],
											"uvWest": [15, 17, 16, 18],
											"uvUp": [16, 18, 15, 17],
											"uvDown": [16, 18, 15, 17]
										}
									]
								}
							]
						}
					]
				},
				{
					"id": "melee_left",
					"invertAxis": "xy",
					"translate": [0, 0, 0]
				},
				{
					"id": "melee_right",
					"invertAxis": "xy",
					"translate": [0, 0, 0]
				},
				{
					"id": "inspect_left",
					"invertAxis": "xy",
					"translate": [0, 0, 0]
				},
				{
					"id": "inspect_right",
					"invertAxis": "xy",
					"translate": [0, 0, 0]
				},
				{
					"id": "dance",
					"invertAxis": "xy",
					"translate": [0, 0, 0]
				},
				{
					"id": "crossbow",
					"invertAxis": "xy",
					"translate": [0, 0, 0]
				}
			]
		},
		{
			"part": "body",
			"id": "body",
			"invertAxis": "xy",
			"translate": [0, -24, 0],
			"boxes": [
				{
					"coordinates": [-4, 12, -2, 8, 12, 4],
					"uvNorth": [20, 20, 28, 32],
					"uvEast": [16, 20, 20, 32],
					"uvSouth": [32, 20, 40, 32],
					"uvWest": [28, 20, 32, 32],
					"uvUp": [20, 16, 28, 20],
					"uvDown": [28, 20, 36, 16]
				}
			],
			"submodels": [
				{
					"id": "jacket2",
					"invertAxis": "xy",
					"translate": [0, 24, 0],
					"boxes": [
						{
							"coordinates": [-4, -12, -2, 8, 12, 4],
							"uvNorth": [20, 36, 28, 48],
							"uvEast": [16, 36, 20, 48],
							"uvSouth": [32, 36, 40, 48],
							"uvWest": [28, 36, 32, 48],
							"uvUp": [20, 32, 28, 36],
							"uvDown": [28, 36, 36, 32],
							"sizeAdd": 0.25
						}
					]
				}
			]
		},
		{
			"part": "left_arm",
			"id": "left_arm",
			"invertAxis": "xy",
			"translate": [5, -22, 0],
			"boxes": [
				{
					"coordinates": [-8, 12, -2, 4, 12, 4],
					"uvNorth": [36, 52, 40, 64],
					"uvEast": [32, 52, 36, 64],
					"uvSouth": [44, 52, 48, 64],
					"uvWest": [40, 52, 44, 64],
					"uvUp": [36, 48, 40, 52],
					"uvDown": [40, 52, 44, 48]
				},
				{
					"coordinates": [-8, 12, -2, 4, 12, 4],
					"uvNorth": [52, 52, 56, 64],
					"uvEast": [48, 52, 52, 64],
					"uvSouth": [60, 52, 64, 64],
					"uvWest": [56, 52, 60, 64],
					"uvUp": [52, 48, 56, 52],
					"uvDown": [56, 52, 60, 48],
					"sizeAdd": 0.25
				}
			]
		},
		{
			"part": "right_arm",
			"id": "right_arm",
			"invertAxis": "xy",
			"translate": [-5, -22, 0],
			"boxes": [
				{
					"coordinates": [4, 12, -2, 4, 12, 4],
					"uvNorth": [44, 20, 48, 32],
					"uvEast": [40, 20, 44, 32],
					"uvSouth": [52, 20, 56, 32],
					"uvWest": [48, 20, 52, 32],
					"uvUp": [44, 16, 48, 20],
					"uvDown": [48, 20, 52, 16]
				},
				{
					"coordinates": [4, 12, -2, 4, 12, 4],
					"uvNorth": [44, 36, 48, 48],
					"uvEast": [40, 36, 44, 48],
					"uvSouth": [52, 36, 56, 48],
					"uvWest": [48, 36, 52, 48],
					"uvUp": [44, 32, 48, 36],
					"uvDown": [48, 36, 52, 32],
					"sizeAdd": 0.25
				}
			]
		},
		{
			"part": "left_leg",
			"id": "left_leg",
			"invertAxis": "xy",
			"translate": [2, -12, 0],
			"boxes": [
				{
					"coordinates": [-4, 0, -2, 4, 12, 4],
					"uvNorth": [20, 52, 24, 64],
					"uvEast": [16, 52, 20, 64],
					"uvSouth": [28, 52, 32, 64],
					"uvWest": [24, 52, 28, 64],
					"uvUp": [20, 48, 24, 52],
					"uvDown": [24, 52, 28, 48]
				},
				{
					"coordinates": [-4, 0, -2, 4, 12, 4],
					"uvNorth": [4, 52, 8, 64],
					"uvEast": [0, 52, 4, 64],
					"uvSouth": [12, 52, 16, 64],
					"uvWest": [8, 52, 12, 64],
					"uvUp": [4, 48, 8, 52],
					"uvDown": [8, 52, 12, 48],
					"sizeAdd": 0.25
				}
			]
		},
		{
			"part": "right_leg",
			"id": "right_leg",
			"invertAxis": "xy",
			"translate": [-2, -12, 0],
			"boxes": [
				{
					"coordinates": [0, 0, -2, 4, 12, 4],
					"uvNorth": [4, 20, 8, 32],
					"uvEast": [0, 20, 4, 32],
					"uvSouth": [12, 20, 16, 32],
					"uvWest": [8, 20, 12, 32],
					"uvUp": [4, 16, 8, 20],
					"uvDown": [8, 20, 12, 16]
				},
				{
					"coordinates": [0, 0, -2, 4, 12, 4],
					"uvNorth": [4, 36, 8, 48],
					"uvEast": [0, 36, 4, 48],
					"uvSouth": [12, 36, 16, 48],
					"uvWest": [8, 36, 12, 48],
					"uvUp": [4, 32, 8, 36],
					"uvDown": [8, 36, 12, 32],
					"sizeAdd": 0.25
				}
			]
		},
		{
			"part": "left_ear",
			"id": "left_ear",
			"invertAxis": "xy",
			"translate": [0, 0, 0]
		},
		{
			"part": "right_ear",
			"id": "right_ear",
			"invertAxis": "xy",
			"translate": [0, 0, 0]
		},
		{
			"part": "jacket",
			"id": "jacket",
			"invertAxis": "xy",
			"translate": [0, 0, 0]
		},
		{
			"part": "left_sleeve",
			"id": "left_sleeve",
			"invertAxis": "xy",
			"translate": [0, 0, 0]
		},
		{
			"part": "right_sleeve",
			"id": "right_sleeve",
			"invertAxis": "xy",
			"translate": [0, 0, 0]
		},
		{
			"part": "left_pants",
			"id": "left_pants",
			"invertAxis": "xy",
			"translate": [0, 0, 0]
		},
		{
			"part": "right_pants",
			"id": "right_pants",
			"invertAxis": "xy",
			"translate": [0, 0, 0]
		}
	]
}